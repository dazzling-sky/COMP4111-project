/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package LibraryManagementService_Async;

import LibraryManagementService_Async.Handlers.Handler;
import org.apache.http.ExceptionLogger;
import org.apache.http.HttpRequest;
import org.apache.http.impl.nio.bootstrap.HttpServer;
import org.apache.http.impl.nio.bootstrap.ServerBootstrap;
import org.apache.http.impl.nio.reactor.IOReactorConfig;
import org.apache.http.nio.protocol.HttpAsyncRequestHandler;

import java.io.IOException;

import java.util.Map;
import java.util.concurrent.TimeUnit;


public class App {

    private static final Routes ROUTES = new Routes();

    public static void main(String[] args) {

        final IOReactorConfig config = IOReactorConfig.custom()
                .setSoTimeout(15000)
                .setTcpNoDelay(true)
                .build();

        final var serverBuilder = ServerBootstrap.bootstrap()
                .setListenerPort(8080)
                .setIOReactorConfig(config)
                .setExceptionLogger(ExceptionLogger.STD_ERR);

        registerHandlers(serverBuilder);

        final HttpServer server = serverBuilder.create();

        try{
            server.start();
            Runtime.getRuntime().addShutdownHook(new Thread(() -> server.shutdown(5, TimeUnit.SECONDS)));
            server.awaitTermination(Long.MAX_VALUE, TimeUnit.DAYS);
        }catch(IOException | InterruptedException e){
            System.out.println(e);
        }
    }

    public static void registerHandlers(ServerBootstrap serverBuilder){
        Map<String, Handler> getHandlers = ROUTES.getPatternForGet();
        Map<String, Handler> postHandlers = ROUTES.getPatternForPost();
        Map<String, Handler> putHandlers = ROUTES.getPatternForPut();
        Map<String, Handler> deleteHandlers = ROUTES.getPatternForDelete();

        getHandlers.forEach(serverBuilder::registerHandler);
        postHandlers.forEach(serverBuilder::registerHandler);
        putHandlers.forEach(serverBuilder::registerHandler);
        deleteHandlers.forEach(serverBuilder::registerHandler);
    }
}
